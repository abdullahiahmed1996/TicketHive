@page "/"
@using TicketHive.Client.Services;
@using TicketHive.Shared.Models;
@inject IAppService service;
@inject AuthenticationStateProvider authStateProvider;

<PageTitle>Index</PageTitle>

<div class="d-flex flex-row align-items-center justify-content-center" style="height:75vh;">
    <div class="d-flex flex-column border border-2 border-dark h-75 w-75 p-5 align-items-center justify-content-center" style="border-radius:20px;overflow:hidden;">
        <div class="d-flex flex-row align-items-center p-2">
            <h1>Welcome to Ticket Hive</h1>
            <img src="/images/logos/black only logo.png" style="width:100px; height:100px;"/>
        </div>
        <p>wqaert yui opnv jalkeb gjlkrew qaertyu iopnvja lkebgjl krewqaert yuiopnvj alkebgjl krewqaert yuiopnvj alke bgjlkrew qaertyuio pnvjalk ebgjlkrewqa ertyui opnvjalke bgjlkrewqae rtyuiopn vjalkebgjlkrewqaert yuiopnvjalkebgj lkrewqaertyuio pnvjalkebgjlkrewq aertyuiopnvjalke bgjlkrewqae rtyuiopnvj alkebgjlkrewqa ertyuiopnvjalkebgj lkrewqaertyuiopnvj alkebgjlkrewqaertyu iopnvjalkebgjlkrewqae rtyuiopnvjalkebgjlkr ewqaertyuiopnvjalkebgjlk rewqaertyuiopnvjalkebg jlkrewqaertyuiopnvja lkebgjlkrewqaertyuiopnvj alkebgjlkrewqaertyuiop nvjalkebgjlkre</p>
     </div>
</div>


@if (Events != null)
{
    @foreach(var eventModel in Events)
    {
        <h1>@eventModel.Name</h1>
@*        <picture>
            <source srcSet="@eventModel.ImageUrl" type="image/avif" />
            <img decoding="async" loading="lazy"/>
        </picture>*@
        <img src="@eventModel.ImageUrl" />
    }
}


<div class="card" style="width: 1000px;">
    <div class="card-body">
        <h3 class="card-title">Ticket Hive</h3>
        
        <p class="card-text">Welcome to Ticket Hive. The best site to find tickets to your favourte events.</p>

    </div>
</div>

@code{
    private List<EventModel>? Events;
    public List<string> Claims { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity!.IsAuthenticated)
        {
            Events = await service.GetEventsAsync();
        }
    }
}
